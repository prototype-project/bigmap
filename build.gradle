buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

bootJar {
	baseName = 'io.bigmap'
	version =  '0.1.0'
}

group = 'beczkowb'
version = '0.1.0'

repositories {
	mavenCentral()
}

sourceSets {
	test {
		resources {
			srcDir "test"
		}
	}
	integration {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration/groovy')
		}
		resources.srcDir file('src/integration/resources')
	}
}

configurations {
	integrationCompile.extendsFrom testCompile
	integrationRuntime.extendsFrom testRuntime
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile group: 'com.google.guava', name: 'guava', version: '19.0'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.3'

	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile 'io.micrometer:micrometer-registry-prometheus'

	testCompile 'org.codehaus.groovy:groovy-all:2.4.15'
	testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.1-groovy-2.4'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
	testCompile "com.github.tomakehurst:wiremock:2.17.0"
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integration.output.classesDir
	classpath = sourceSets.integration.runtimeClasspath
}

task run {
	doFirst {
		String env = project.hasProperty('environment') ? project.property('environment'): 'local'
		String port = project.hasProperty('port') ? project.property('port'): '8080'
		bootRun.args = ["--environment=" + env, "--port=" + port]
	}
}

bootRun {
	dependsOn run
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}


docker {
	dependsOn build
	name "${project.group}/${bootJar.baseName}"
	files bootJar.archivePath
	buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}
